{"ast":null,"code":"var _jsxFileName = \"/Users/mit/booking-systemm/src/pages/Reserve/Reserve.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Reserve = () => {\n  _s();\n  const [availableComputers, setAvailableComputers] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(\"\"); // State to store the selected date\n  const [selectedComputer, setSelectedComputer] = useState(\"\"); // State to store the selected computer\n  const [isAvailableChecked, setIsAvailableChecked] = useState(false); // State to track if availability has been checked\n  const navigate = useNavigate();\n  useEffect(() => {\n    const token = localStorage.getItem('jwt');\n    if (!token) {\n      navigate('/login'); // Redirect to login if no token found\n    }\n  }, [navigate]);\n  const fetchAvailableComputers = async date => {\n    try {\n      const token = localStorage.getItem('jwt');\n      const response = await axios.post('http://localhost:3000/available-computers', {\n        date\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const formattedComputers = response.data.map(item => `Computer #${item.computer_id}`);\n      console.log(formattedComputers);\n      setAvailableComputers(formattedComputers); // Store the list of available computers\n      setIsAvailableChecked(true); // Mark availability as checked\n      setSelectedComputer(\"\"); // Reset selected computer when fetching new availability\n    } catch (error) {\n      console.error('Error fetching available computers:', error);\n    }\n  };\n  const handleDateChange = event => {\n    setSelectedDate(event.target.value); // Update the selected date\n  };\n  const handleSubmit = event => {\n    event.preventDefault(); // Prevent default form submission\n    if (selectedDate) {\n      fetchAvailableComputers(selectedDate); // Fetch available computers based on selected date\n    }\n  };\n  const handleComputerSelect = event => {\n    setSelectedComputer(event.target.value); // Update the selected computer\n  };\n  const handleConfirmSelection = () => {\n    // Handle confirmation logic here (e.g., navigating or showing a message)\n    console.log(`Selected: ${selectedComputer}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reserve Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: selectedDate,\n          onChange: handleDateChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Check Availability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), isAvailableChecked && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Available Computers for \", selectedDate, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedComputer,\n        onChange: handleComputerSelect,\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Computer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this), availableComputers.length > 0 ? availableComputers.map((computer, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: computer,\n          children: computer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 33\n        }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          children: \"No computers available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConfirmSelection,\n        disabled: !selectedComputer,\n        children: \"Confirm Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(Reserve, \"4e3cgHuD2gT9l46HM1eaKmvHsyU=\", false, function () {\n  return [useNavigate];\n});\n_c = Reserve;\nexport default Reserve;\nvar _c;\n$RefreshReg$(_c, \"Reserve\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","jsxDEV","_jsxDEV","Reserve","_s","availableComputers","setAvailableComputers","selectedDate","setSelectedDate","selectedComputer","setSelectedComputer","isAvailableChecked","setIsAvailableChecked","navigate","token","localStorage","getItem","fetchAvailableComputers","date","response","post","headers","Authorization","formattedComputers","data","map","item","computer_id","console","log","error","handleDateChange","event","target","value","handleSubmit","preventDefault","handleComputerSelect","handleConfirmSelection","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","required","length","computer","index","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/mit/booking-systemm/src/pages/Reserve/Reserve.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\nconst Reserve = () => {\n    const [availableComputers, setAvailableComputers] = useState([]);\n    const [selectedDate, setSelectedDate] = useState(\"\"); // State to store the selected date\n    const [selectedComputer, setSelectedComputer] = useState(\"\"); // State to store the selected computer\n    const [isAvailableChecked, setIsAvailableChecked] = useState(false); // State to track if availability has been checked\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const token = localStorage.getItem('jwt');\n        if (!token) {\n            navigate('/login'); // Redirect to login if no token found\n        }\n    }, [navigate]);\n\n    const fetchAvailableComputers = async (date) => {\n        try {\n            const token = localStorage.getItem('jwt');\n            const response = await axios.post('http://localhost:3000/available-computers', { date }, {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n            const formattedComputers = response.data.map(item => `Computer #${item.computer_id}`);\n            console.log(formattedComputers);\n            setAvailableComputers(formattedComputers); // Store the list of available computers\n            setIsAvailableChecked(true); // Mark availability as checked\n            setSelectedComputer(\"\"); // Reset selected computer when fetching new availability\n        } catch (error) {\n            console.error('Error fetching available computers:', error);\n        }\n    };\n\n    const handleDateChange = (event) => {\n        setSelectedDate(event.target.value); // Update the selected date\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault(); // Prevent default form submission\n        if (selectedDate) {\n            fetchAvailableComputers(selectedDate); // Fetch available computers based on selected date\n        }\n    };\n\n    const handleComputerSelect = (event) => {\n        setSelectedComputer(event.target.value); // Update the selected computer\n    };\n\n    const handleConfirmSelection = () => {\n        // Handle confirmation logic here (e.g., navigating or showing a message)\n        console.log(`Selected: ${selectedComputer}`);\n    };\n\n    return (\n        <div>\n            <h1>Reserve Page</h1>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Select Date:\n                    <input type=\"date\" value={selectedDate} onChange={handleDateChange} required />\n                </label>\n                <button type=\"submit\">Check Availability</button>\n            </form>\n\n            {isAvailableChecked && (\n                <div>\n                    <h2>Available Computers for {selectedDate}:</h2>\n                    <select value={selectedComputer} onChange={handleComputerSelect} required>\n                        <option value=\"\">Select a Computer</option>\n                        {availableComputers.length > 0 ? (\n                            availableComputers.map((computer, index) => (\n                                <option key={index} value={computer}>{computer}</option>\n                            ))\n                        ) : (\n                            <option disabled>No computers available.</option>\n                        )}\n                    </select>\n                    <button onClick={handleConfirmSelection} disabled={!selectedComputer}>Confirm Selection</button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Reserve;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}