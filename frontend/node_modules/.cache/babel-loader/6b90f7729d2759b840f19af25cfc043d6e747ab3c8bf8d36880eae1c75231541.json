{"ast":null,"code":"var _jsxFileName = \"/Users/mit/booking-systemm/src/pages/Reserve/Reserve.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Reserve = () => {\n  _s();\n  const [availableComputers, setAvailableComputers] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(\"\"); // State to store the selected date\n  const [selectedComputer, setSelectedComputer] = useState(null); // State to store selected computer\n  const navigate = useNavigate();\n  useEffect(() => {\n    const token = localStorage.getItem('jwt');\n    if (!token) {\n      navigate('/login');\n    }\n  }, [navigate]);\n  const fetchAvailableComputers = async date => {\n    try {\n      const token = localStorage.getItem('jwt');\n      const response = await axios.post('http://localhost:3000/available-computers', {\n        date\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const formattedComputers = response.data.map(item => `Computer #${item.computer_id}`);\n      setAvailableComputers(formattedComputers); // Store the list of available computers\n    } catch (error) {\n      console.error('Error fetching available computers:', error);\n    }\n  };\n  const handleDateChange = event => {\n    setSelectedDate(event.target.value); // Update the selected date\n  };\n  const handleSubmit = event => {\n    event.preventDefault(); // Prevent default action\n    if (selectedDate) {\n      fetchAvailableComputers(selectedDate); // Call the function to fetch available computers\n    }\n  };\n  const handleComputerSelect = computer => {\n    setSelectedComputer(computer); // Set the selected computer\n    // You can perform additional actions here, like navigating to another page or showing a confirmation\n    console.log(`Selected: ${computer}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reserve Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: selectedDate,\n          onChange: handleDateChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Check Availability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Available Computers for \", selectedDate, \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: availableComputers.length > 0 ? availableComputers.map((computer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleComputerSelect(computer),\n          children: computer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this), \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No computers available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this) // Message if no computers are available\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), selectedComputer && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"You selected: \", selectedComputer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 34\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(Reserve, \"2OyOPWUG5L4KknXGlKJYBSrdl10=\", false, function () {\n  return [useNavigate];\n});\n_c = Reserve;\nexport default Reserve;\nvar _c;\n$RefreshReg$(_c, \"Reserve\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","jsxDEV","_jsxDEV","Reserve","_s","availableComputers","setAvailableComputers","selectedDate","setSelectedDate","selectedComputer","setSelectedComputer","navigate","token","localStorage","getItem","fetchAvailableComputers","date","response","post","headers","Authorization","formattedComputers","data","map","item","computer_id","error","console","handleDateChange","event","target","value","handleSubmit","preventDefault","handleComputerSelect","computer","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","required","length","index","onClick","_c","$RefreshReg$"],"sources":["/Users/mit/booking-systemm/src/pages/Reserve/Reserve.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\nconst Reserve = () => {\n    const [availableComputers, setAvailableComputers] = useState([]);\n    const [selectedDate, setSelectedDate] = useState(\"\"); // State to store the selected date\n    const [selectedComputer, setSelectedComputer] = useState(null); // State to store selected computer\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const token = localStorage.getItem('jwt');\n        if (!token) {\n            navigate('/login');\n        }\n    }, [navigate]);\n\n    const fetchAvailableComputers = async (date) => {\n        try {\n            const token = localStorage.getItem('jwt');\n            const response = await axios.post('http://localhost:3000/available-computers', { date }, {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n            const formattedComputers = response.data.map(item => `Computer #${item.computer_id}`);\n            setAvailableComputers(formattedComputers); // Store the list of available computers\n        } catch (error) {\n            console.error('Error fetching available computers:', error);\n        }\n    };\n\n    const handleDateChange = (event) => {\n        setSelectedDate(event.target.value); // Update the selected date\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault(); // Prevent default action\n        if (selectedDate) {\n            fetchAvailableComputers(selectedDate); // Call the function to fetch available computers\n        }\n    };\n\n    const handleComputerSelect = (computer) => {\n        setSelectedComputer(computer); // Set the selected computer\n        // You can perform additional actions here, like navigating to another page or showing a confirmation\n        console.log(`Selected: ${computer}`);\n    };\n\n    return (\n        <div>\n            <h1>Reserve Page</h1>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Select Date:\n                    <input type=\"date\" value={selectedDate} onChange={handleDateChange} required />\n                </label>\n                <button type=\"submit\">Check Availability</button>\n            </form>\n            <h2>Available Computers for {selectedDate}:</h2>\n            <ul>\n                {availableComputers.length > 0 ? (\n                    availableComputers.map((computer, index) => (\n                        <li key={index}>\n                            <button onClick={() => handleComputerSelect(computer)}>{computer}</button> {/* Clickable computer name */}\n                        </li>\n                    ))\n                ) : (\n                    <li>No computers available.</li> // Message if no computers are available\n                )}\n            </ul>\n            {selectedComputer && <h3>You selected: {selectedComputer}</h3>} {/* Display selected computer */}\n        </div>\n    );\n};\n\nexport default Reserve;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChE,MAAMa,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IACZ,MAAMe,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;IACzC,IAAI,CAACF,KAAK,EAAE;MACRD,QAAQ,CAAC,QAAQ,CAAC;IACtB;EACJ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMI,uBAAuB,GAAG,MAAOC,IAAI,IAAK;IAC5C,IAAI;MACA,MAAMJ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;MACzC,MAAMG,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,2CAA2C,EAAE;QAAEF;MAAK,CAAC,EAAE;QACrFG,OAAO,EAAE;UACLC,aAAa,EAAE,UAAUR,KAAK;QAClC;MACJ,CAAC,CAAC;MACF,MAAMS,kBAAkB,GAAGJ,QAAQ,CAACK,IAAI,CAACC,GAAG,CAACC,IAAI,IAAI,aAAaA,IAAI,CAACC,WAAW,EAAE,CAAC;MACrFnB,qBAAqB,CAACe,kBAAkB,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC/D;EACJ,CAAC;EAED,MAAME,gBAAgB,GAAIC,KAAK,IAAK;IAChCrB,eAAe,CAACqB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACzC,CAAC;EAED,MAAMC,YAAY,GAAIH,KAAK,IAAK;IAC5BA,KAAK,CAACI,cAAc,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI1B,YAAY,EAAE;MACdQ,uBAAuB,CAACR,YAAY,CAAC,CAAC,CAAC;IAC3C;EACJ,CAAC;EAED,MAAM2B,oBAAoB,GAAIC,QAAQ,IAAK;IACvCzB,mBAAmB,CAACyB,QAAQ,CAAC,CAAC,CAAC;IAC/B;IACAR,OAAO,CAACS,GAAG,CAAC,aAAaD,QAAQ,EAAE,CAAC;EACxC,CAAC;EAED,oBACIjC,OAAA;IAAAmC,QAAA,gBACInC,OAAA;MAAAmC,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBvC,OAAA;MAAMwC,QAAQ,EAAEV,YAAa;MAAAK,QAAA,gBACzBnC,OAAA;QAAAmC,QAAA,GAAO,cAEH,eAAAnC,OAAA;UAAOyC,IAAI,EAAC,MAAM;UAACZ,KAAK,EAAExB,YAAa;UAACqC,QAAQ,EAAEhB,gBAAiB;UAACiB,QAAQ;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5E,CAAC,eACRvC,OAAA;QAAQyC,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACPvC,OAAA;MAAAmC,QAAA,GAAI,0BAAwB,EAAC9B,YAAY,EAAC,GAAC;IAAA;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChDvC,OAAA;MAAAmC,QAAA,EACKhC,kBAAkB,CAACyC,MAAM,GAAG,CAAC,GAC1BzC,kBAAkB,CAACkB,GAAG,CAAC,CAACY,QAAQ,EAAEY,KAAK,kBACnC7C,OAAA;QAAAmC,QAAA,gBACInC,OAAA;UAAQ8C,OAAO,EAAEA,CAAA,KAAMd,oBAAoB,CAACC,QAAQ,CAAE;UAAAE,QAAA,EAAEF;QAAQ;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,KAAC;MAAA,GADtEM,KAAK;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACP,CAAC,gBAEFvC,OAAA;QAAAmC,QAAA,EAAI;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,CAAC;IACpC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EACJhC,gBAAgB,iBAAIP,OAAA;MAAAmC,QAAA,GAAI,gBAAc,EAAC5B,gBAAgB;IAAA;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAAC,GAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEd,CAAC;AAACrC,EAAA,CAtEID,OAAO;EAAA,QAIQH,WAAW;AAAA;AAAAiD,EAAA,GAJ1B9C,OAAO;AAwEb,eAAeA,OAAO;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}