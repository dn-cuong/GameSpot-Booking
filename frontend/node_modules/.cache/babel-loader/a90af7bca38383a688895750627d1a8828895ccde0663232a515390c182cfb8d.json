{"ast":null,"code":"var _jsxFileName = \"/Users/mit/booking-systemm/src/pages/Reserve/Reserve.js\",\n  _s = $RefreshSig$();\n// src/pages/Reserve/Reserve.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Reserve = () => {\n  _s();\n  const navigate = useNavigate();\n  const [date, setDate] = useState('');\n  const [computers, setComputers] = useState([]);\n  const [loading, setLoading] = useState(false); // Để xử lý trạng thái tải\n\n  useEffect(() => {\n    const token = localStorage.getItem('jwt');\n    if (!token) {\n      navigate('/login'); // Nếu không có token, chuyển hướng đến trang login\n    }\n  }, [navigate]);\n  const handleDateChange = async event => {\n    const selectedDate = event.target.value;\n    setDate(selectedDate);\n\n    // Kiểm tra xem có chọn ngày không\n    if (selectedDate) {\n      setLoading(true); // Bắt đầu trạng thái tải\n      try {\n        const response = await axios.post('/reserve', {\n          date: selectedDate\n        });\n        setComputers(response.data); // Cập nhật danh sách máy tính khả dụng\n      } catch (error) {\n        console.error(\"Error fetching available computers:\", error);\n        setComputers([]);\n      } finally {\n        setLoading(false); // Kết thúc trạng thái tải\n      }\n    } else {\n      setComputers([]); // Nếu không có ngày, xóa danh sách máy tính\n    }\n  };\n  const handleReserve = async computer_id => {\n    try {\n      const response = await axios.post('/reserve', {\n        date,\n        computer_id\n      });\n      alert(response.data.message); // Hiển thị thông báo khi đặt chỗ thành công\n    } catch (error) {\n      console.error(\"Error making reservation:\", error);\n      alert(\"Error making reservation\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reserve Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Choose a date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        onChange: handleDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading available computers...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Available Computers:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: computers.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No available computers for this date.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this) : computers.map(computer => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Computer ID: \", computer.computer_id, \", Status: \", computer.status, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleReserve(computer.computer_id),\n          children: \"Reserve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)]\n      }, computer.computer_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Reserve, \"ditq1/7+Qs3Q6cszpUpYIF+v6Pk=\", false, function () {\n  return [useNavigate];\n});\n_c = Reserve;\nexport default Reserve;\nvar _c;\n$RefreshReg$(_c, \"Reserve\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","Reserve","_s","navigate","date","setDate","computers","setComputers","loading","setLoading","token","localStorage","getItem","handleDateChange","event","selectedDate","target","value","response","post","data","error","console","handleReserve","computer_id","alert","message","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","length","map","computer","status","onClick","_c","$RefreshReg$"],"sources":["/Users/mit/booking-systemm/src/pages/Reserve/Reserve.js"],"sourcesContent":["// src/pages/Reserve/Reserve.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Reserve = () => {\n  const navigate = useNavigate();\n  const [date, setDate] = useState('');\n  const [computers, setComputers] = useState([]);\n  const [loading, setLoading] = useState(false); // Để xử lý trạng thái tải\n\n  useEffect(() => {\n    const token = localStorage.getItem('jwt');\n    if (!token) {\n      navigate('/login'); // Nếu không có token, chuyển hướng đến trang login\n    }\n  }, [navigate]);\n\n  const handleDateChange = async (event) => {\n    const selectedDate = event.target.value;\n    setDate(selectedDate);\n\n    // Kiểm tra xem có chọn ngày không\n    if (selectedDate) {\n      setLoading(true); // Bắt đầu trạng thái tải\n      try {\n        const response = await axios.post('/reserve', { date: selectedDate });\n        setComputers(response.data); // Cập nhật danh sách máy tính khả dụng\n      } catch (error) {\n        console.error(\"Error fetching available computers:\", error);\n        setComputers([]);\n      } finally {\n        setLoading(false); // Kết thúc trạng thái tải\n      }\n    } else {\n      setComputers([]); // Nếu không có ngày, xóa danh sách máy tính\n    }\n  };\n\n  const handleReserve = async (computer_id) => {\n    try {\n      const response = await axios.post('/reserve', { date, computer_id });\n      alert(response.data.message); // Hiển thị thông báo khi đặt chỗ thành công\n    } catch (error) {\n      console.error(\"Error making reservation:\", error);\n      alert(\"Error making reservation\");\n    }\n  };\n\n  return (\n    <div>\n      <h1>Reserve Page</h1>\n      <label>\n        Choose a date:\n        <input type=\"date\" onChange={handleDateChange} />\n      </label>\n      {loading && <p>Loading available computers...</p>}\n      <h2>Available Computers:</h2>\n      <ul>\n        {computers.length === 0 ? (\n          <li>No available computers for this date.</li>\n        ) : (\n          computers.map((computer) => (\n            <li key={computer.computer_id}>\n              Computer ID: {computer.computer_id}, Status: {computer.status}\n              <button onClick={() => handleReserve(computer.computer_id)}>Reserve</button>\n            </li>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reserve;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}