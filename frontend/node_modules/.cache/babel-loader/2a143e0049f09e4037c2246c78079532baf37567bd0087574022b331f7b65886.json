{"ast":null,"code":"var _jsxFileName = \"/Users/mit/booking-systemm/src/pages/Manage/Manage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { FaLaptop } from 'react-icons/fa'; // Import an icon for the computer\nimport './Manage.css'; // Assuming you have a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Manage = () => {\n  _s();\n  const [reservations, setReservations] = useState([]);\n  const [error, setError] = useState('');\n  const fetchReservations = async () => {\n    try {\n      const token = localStorage.getItem('jwt'); // Retrieve token from local storage\n      const usf_id = localStorage.getItem('usf_id'); // Retrieve usf_id from local storage\n      const response = await axios.post('http://localhost:3000/manage', {\n        usf_id\n      },\n      // Send usf_id in the request body\n      {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(response.data);\n      setReservations(response.data); // Set the fetched reservations to state\n    } catch (err) {\n      console.error('Error fetching reservations:', err);\n      setError('You have not booked any computers');\n    }\n  };\n  const handleDelete = async (usf_id, date_time) => {\n    try {\n      const token = localStorage.getItem('jwt');\n      const formattedDate = new Date(date_time).toISOString().split('T')[0]; // Format to 'YYYY-MM-DD'\n\n      // Make the DELETE request\n      const response = await axios.delete('http://localhost:3000/manage', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        data: {\n          usf_id,\n          date_time: formattedDate\n        } // Send usf_id and formatted date\n      });\n\n      // Check if the response was successful\n      if (response.status === 200) {\n        // Update the state to remove the deleted reservation\n        setReservations(reservations => reservations.filter(reservation => reservation.usf_id !== usf_id || new Date(reservation.date_time).toISOString().split('T')[0] !== formattedDate));\n        alert('Reservation deleted successfully!');\n      } else {\n        throw new Error('Failed to delete reservation'); // Handle non-200 responses\n      }\n    } catch (err) {\n      console.error('Error deleting reservation:', err);\n      setError('Error deleting reservation');\n      alert('Could not delete reservation. Please try again.'); // Inform the user of the error\n    }\n  };\n  useEffect(() => {\n    fetchReservations(); // Fetch reservations on component mount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"manage-reservation\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Manage Your Reservations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reservation-list\",\n      children: reservations.map(reservation => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reservation-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reservation-icon\",\n          children: [/*#__PURE__*/_jsxDEV(FaLaptop, {\n            size: 40\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reservation-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: reservation.computer_id || 'Computer'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date: \", new Date(reservation.date_time).toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Status: \", reservation.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete-button\",\n          onClick: () => handleDelete(reservation.usf_id, reservation.date_time) // Call delete function with usf_id and date_time\n          ,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this)]\n      }, reservation.computer_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(Manage, \"e0HiwSq7yeAs7m/Bs3U8Qc9GrYc=\");\n_c = Manage;\nexport default Manage;\nvar _c;\n$RefreshReg$(_c, \"Manage\");","map":{"version":3,"names":["React","useEffect","useState","axios","FaLaptop","jsxDEV","_jsxDEV","Manage","_s","reservations","setReservations","error","setError","fetchReservations","token","localStorage","getItem","usf_id","response","post","headers","Authorization","console","log","data","err","handleDelete","date_time","formattedDate","Date","toISOString","split","delete","status","filter","reservation","alert","Error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","size","computer_id","toLocaleDateString","onClick","_c","$RefreshReg$"],"sources":["/Users/mit/booking-systemm/src/pages/Manage/Manage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { FaLaptop } from 'react-icons/fa'; // Import an icon for the computer\nimport './Manage.css'; // Assuming you have a CSS file for styling\n\nconst Manage = () => {\n    const [reservations, setReservations] = useState([]);\n    const [error, setError] = useState('');\n\n    const fetchReservations = async () => {\n        try {\n            const token = localStorage.getItem('jwt'); // Retrieve token from local storage\n            const usf_id = localStorage.getItem('usf_id'); // Retrieve usf_id from local storage\n            const response = await axios.post('http://localhost:3000/manage', \n                { usf_id }, // Send usf_id in the request body\n                {\n                    headers: { Authorization: `Bearer ${token}` },\n                }\n            );\n            console.log(response.data);\n            setReservations(response.data); // Set the fetched reservations to state\n        } catch (err) {\n            console.error('Error fetching reservations:', err);\n            setError('You have not booked any computers');\n        }\n    };\n\n    const handleDelete = async (usf_id, date_time) => {\n        try {\n            const token = localStorage.getItem('jwt');\n            const formattedDate = new Date(date_time).toISOString().split('T')[0]; // Format to 'YYYY-MM-DD'\n    \n            // Make the DELETE request\n            const response = await axios.delete('http://localhost:3000/manage', {\n                headers: { Authorization: `Bearer ${token}` },\n                data: { usf_id, date_time: formattedDate } // Send usf_id and formatted date\n            });\n    \n            // Check if the response was successful\n            if (response.status === 200) {\n                // Update the state to remove the deleted reservation\n                setReservations(reservations => \n                    reservations.filter(reservation => \n                        reservation.usf_id !== usf_id || \n                        new Date(reservation.date_time).toISOString().split('T')[0] !== formattedDate\n                    )\n                );\n                alert('Reservation deleted successfully!');\n            } else {\n                throw new Error('Failed to delete reservation'); // Handle non-200 responses\n            }\n        } catch (err) {\n            console.error('Error deleting reservation:', err);\n            setError('Error deleting reservation');\n            alert('Could not delete reservation. Please try again.'); // Inform the user of the error\n        }\n    };\n\n    useEffect(() => {\n        fetchReservations(); // Fetch reservations on component mount\n    }, []);\n\n    return (\n        <div className=\"manage-reservation\">\n            <h1>Manage Your Reservations</h1>\n            {error && <p className=\"error-message\">{error}</p>}\n            <div className=\"reservation-list\">\n                {reservations.map(reservation => (\n                    <div key={reservation.computer_id} className=\"reservation-card\">\n                        <div className=\"reservation-icon\">\n                            <FaLaptop size={40} /> {/* Display laptop icon */}\n                        </div>\n                        <div className=\"reservation-details\">\n                            <h2>{reservation.computer_id || 'Computer'}</h2> {/* Display computer_id */}\n                            <p>Date: {new Date(reservation.date_time).toLocaleDateString()}</p> {/* Only show the date */}\n                            <p>Status: {reservation.status}</p>\n                        </div>\n                        <button \n                            className=\"delete-button\" \n                            onClick={() => handleDelete(reservation.usf_id, reservation.date_time)} // Call delete function with usf_id and date_time\n                        >\n                            Cancel\n                        </button>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Manage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}